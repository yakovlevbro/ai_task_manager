from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.views import View
import plotly.express as px
import pandas as pd
from .models import GanttChart


# Create your views here.
class AddProjectView(View):
    def get(self, request):
        return render(request, 'add_project.html')

    def post(self, request):
        question1 = request.POST.get('question1')
        question2 = request.POST.get('question2')
        question3 = request.POST.get('question3')
        question4 = request.POST.get('question4')
        question5 = request.POST.get('question5')
        question6 = request.POST.get('question6')

        user_message = (
            """
                    Project Vision

                    Название проекта: Образовательная платформа "LearnHub"

                    Цель проекта: Создание онлайн-платформы для образования, которая предоставит пользователям доступ к разнообразным курсам и обучающим материалам по различным категориям навыков и знаний.

                    Ключевые функции и возможности:
                    1. Регистрация и аутентификация пользователей.
                    2. Создание и редактирование профилей пользователей.
                    3. Поиск и просмотр доступных курсов по категориям.
                    4. Прохождение курсов с отслеживанием прогресса.
                    5. Возможность комментирования и обсуждения материалов.
                    6. Управление личным кабинетом и настройки профиля.
                    7. Административные функции для управления контентом и пользователями.

                    Стратегия привлечения пользователей:
                    1. Создание привлекательной Landing Page с регистрационной формой.
                    2. Запуск рекламных кампаний в социальных сетях и поисковых системах.
                    3. Партнерские соглашения с образовательными учреждениями.
                    4. Анализ рынка и конкурентов для определения эффективных стратегий маркетинга.

                    Ресурсы для разработки:
                    1. Команда разработчиков:
                       - Backend разработчики (Андрей, Дмитрий)
                       - Frontend разработчик (Олег)
                       - Дизайнер (Дарья)
                       - Project manager (Александра)
                    2. Серверное оборудование или облачные вычисления.
                    3. База данных для хранения информации о пользователях и контенте.
                    4. Маркетинговые ресурсы для привлечения пользователей.

                    Этапы разработки:
                    1. Планирование проекта и определение требований (2 недели).
                    2. Разработка серверной части платформы (4 недели).
                    3. Разработка клиентской части приложения (4 недели).
                    4. Создание дизайна интерфейса (3 недели).
                    5. Тестирование и отладка (2 недели).
                    6. Запуск и продвижение платформы (непрерывный процесс).

                    График работы команды:
                    - Ежедневные стендапы для обсуждения прогресса и проблем.
                    - Регулярные встречи для обсуждения стратегии и планирования.
                    - Гибкий график работы с учетом срочности задач и индивидуальных предпочтений членов команды.
            """
        )

        return HttpResponse(user_message)


class CreateGanttView(View):
    def post(self, request, *args, **kwargs):
        data = {
                "project_name": "LearnHub",
                "tasks": [
                {
                    "id": 1,
                    "task_name": "Настройка окружения",
                    "start_date": "2024-06-15",
                    "end_date": "2024-06-20",
                    "assigned_to": "Андрей, Дмитрий",
                    "description": "Установка и настройка необходимых инструментов разработки, конфигурация сервера, выбор базы данных."
                },
                {
                    "id": 2,
                    "task_name": "Аутентификация и авторизация",
                    "start_date": "2024-06-21",
                    "end_date": "2024-06-30",
                    "assigned_to": "Андрей",
                    "description": "Реализация системы аутентификации пользователей, настройка механизмов авторизации и управления сессиями."
                },
                {
                    "id": 3,
                    "task_name": "Управление пользователями",
                    "start_date": "2024-07-01",
                    "end_date": "2024-07-10",
                    "assigned_to": "Дмитрий",
                    "description": "Создание API для управления пользователями: регистрация, редактирование профилей, восстановление пароля."
                },
                {
                    "id": 4,
                    "task_name": "Управление контентом",
                    "start_date": "2024-07-11",
                    "end_date": "2024-07-20",
                    "assigned_to": "Андрей",
                    "description": "Реализация API для управления контентом: добавление, редактирование и удаление курсов, лекций, материалов."
                },
                {
                    "id": 5,
                    "task_name": "Обработка запросов",
                    "start_date": "2024-07-21",
                    "end_date": "2024-07-31",
                    "assigned_to": "Дмитрий",
                    "description": "Написание обработчиков запросов, валидация данных, обработка ошибок и исключений."
                },
                {
                    "id": 6,
                    "task_name": "Интеграция с базой данных",
                    "start_date": "2024-08-01",
                    "end_date": "2024-08-10",
                    "assigned_to": "Андрей",
                    "description": "Создание схемы базы данных, разработка моделей данных, выполнение миграций."
                },
                {
                    "id": 7,
                    "task_name": "Тестирование API",
                    "start_date": "2024-08-11",
                    "end_date": "2024-08-20",
                    "assigned_to": "Дмитрий",
                    "description": "Написание и запуск модульных тестов для проверки функциональности API, отладка и исправление ошибок."
                },
                {
                    "id": 8,
                    "task_name": "Верстка интерфейса",
                    "start_date": "2024-06-15",
                    "end_date": "2024-06-25",
                    "assigned_to": "Олег",
                    "description": "Разработка HTML-разметки и CSS-стилей для создания пользовательского интерфейса, адаптация под различные устройства."
                },
                {
                    "id": 9,
                    "task_name": "Взаимодействие с API",
                    "start_date": "2024-06-26",
                    "end_date": "2024-07-05",
                    "assigned_to": "Олег",
                    "description": "Написание JavaScript-кода для взаимодействия с серверной частью приложения через API, обработка ответов и управление данными."
                },
                {
                    "id": 10,
                    "task_name": "Реализация функциональности",
                    "start_date": "2024-07-06",
                    "end_date": "2024-07-15",
                    "assigned_to": "Олег",
                    "description": "Добавление функциональных возможностей на клиентской стороне: просмотр курсов, прохождение уроков, комментирование материалов."
                },
                {
                    "id": 11,
                    "task_name": "Оптимизация производительности",
                    "start_date": "2024-07-16",
                    "end_date": "2024-07-25",
                    "assigned_to": "Олег",
                    "description": "Оптимизация кода, улучшение скорости загрузки и отображения страниц, рефакторинг."
                },
                {
                    "id": 12,
                    "task_name": "Интеграционное тестирование",
                    "start_date": "2024-07-26",
                    "end_date": "2024-08-05",
                    "assigned_to": "Александра",
                    "description": "Проверка взаимодействия серверной и клиентской частей приложения, тестирование сценариев использования."
                },
                {
                    "id": 13,
                    "task_name": "Системное тестирование",
                    "start_date": "2024-08-06",
                    "end_date": "2024-08-15",
                    "assigned_to": "Александра",
                    "description": "Тестирование приложения как единого целого, проверка его работоспособности и соответствия требованиям, выявление и устранение системных ошибок."
                },
                {
                    "id": 14,
                    "task_name": "Тестирование совместимости",
                    "start_date": "2024-08-16",
                    "end_date": "2024-08-25",
                    "assigned_to": "Александра",
                    "description": "Проверка работы приложения на различных устройствах, операционных системах и браузерах, обнаружение и исправление проблем с отображением и функциональностью."
                },
                {
                    "id": 15,
                    "task_name": "Пользовательское тестирование",
                    "start_date": "2024-08-26",
                    "end_date": "2024-09-05",
                    "assigned_to": "Александра",
                    "description": "Проведение закрытого и открытого тестирования приложения среди конечных пользователей, сбор обратной связи и предложений по улучшению."
                }
            ]
        }

        # Создаем DataFrame для диаграммы Ганта
        df = pd.DataFrame([
            dict(Task=task['task_name'], Start=task['start_date'], Finish=task['end_date'],
                 Resource=task['assigned_to'], Description=task['description'])
            for task in data['tasks']
        ])

        # Создаем диаграмму Ганта с всплывающими подсказками
        fig = px.timeline(df, x_start="Start", x_end="Finish", y="Task", color="Resource", title=data['project_name'],
                          hover_name="Description")

        # Преобразуем график Plotly в HTML строку
        plot_html = fig.to_html(full_html=False)

        # Сохраняем график в базу данных
        chart = GanttChart.objects.create(project_name=data['project_name'], chart_html=plot_html)

        # Перенаправляем на страницу с графиком
        return redirect('show_gantt_chart', pk=chart.pk)


class ShowGanttChartView(View):
        def get(self, request, pk, *args, **kwargs):
            chart = GanttChart.objects.get(pk=pk)
            return render(request, 'gantt_chart.html', {'plot_html': chart.chart_html})
